//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Ellucian.Generated.Eedm;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ellucian.Generated.Eedm.ApplyApplications_V1_0_0
{
    using System = global::System;

    

    /// <summary>
    /// An application for admission to an institute of higher learning.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplyApplications_V1_0_0
    {
        /// <summary>
        /// Metadata about the JSON payload
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata? Metadata { get; set; } = default!;

        /// <summary>
        /// The global identifier of the Apply application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// The applicant's name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name Name { get; set; } = new Name();

        /// <summary>
        /// The applicant's demographic information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("demographics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Demographics? Demographics { get; set; } = default!;

        /// <summary>
        /// The email addresses at which an applicant can be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Emails> Emails { get; set; } = new System.Collections.ObjectModel.Collection<Emails>();

        /// <summary>
        /// The phones and phone-connected devices at which an applicant can be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Phones>? Phones { get; set; } = default!;

        /// <summary>
        /// The physical addresses where an applicant resides or may be contacted by mail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Addresses>? Addresses { get; set; } = default!;

        /// <summary>
        /// The applicant's enrollment information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Enrollment? Enrollment { get; set; } = default!;

        /// <summary>
        /// The applicant's citizenship information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Citizenship? Citizenship { get; set; } = default!;

        /// <summary>
        /// Military service information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("military", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Military? Military { get; set; } = default!;

        /// <summary>
        /// The secondary schools attended by the applicant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondarySchools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecondarySchools>? SecondarySchools { get; set; } = default!;

        /// <summary>
        /// Post-secondary institutions that the applicant previously attended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previousInstitutions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PreviousInstitutions>? PreviousInstitutions { get; set; } = default!;

        /// <summary>
        /// The applicant's parents or legal guardians.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentsAndLegalGuardians", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParentsAndLegalGuardians>? ParentsAndLegalGuardians { get; set; } = default!;

        /// <summary>
        /// The applicant's residency type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResidencyType? ResidencyType { get; set; } = default!;

        /// <summary>
        /// The applicant's legacy status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legacyStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegacyStatus? LegacyStatus { get; set; } = default!;

        /// <summary>
        /// Personal identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Credentials>? Credentials { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant intends to apply for financial aid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("financialAid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FinancialAid { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant is interested in campus housing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campusHousing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CampusHousing { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant is a first generation applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstGenerationApplicant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FirstGenerationApplicant { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant has previously attended the institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previouslyAttended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreviouslyAttended { get; set; } = default!;

        /// <summary>
        /// An applicant's interests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Interests>? Interests { get; set; } = default!;

        /// <summary>
        /// Disability types or medical information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabilityTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DisabilityTypes>? DisabilityTypes { get; set; } = default!;

        /// <summary>
        /// Has applicant been convicted of a felony
        /// </summary>
        [Newtonsoft.Json.JsonProperty("felony", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Felony { get; set; } = default!;

        /// <summary>
        /// Indicates is applicant has been the subject of disciplinary action at a previous institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disciplinaryAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisciplinaryAction { get; set; } = default!;

        /// <summary>
        /// The applicant's emergency contacts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emergencyContacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmergencyContacts>? EmergencyContacts { get; set; } = default!;

        /// <summary>
        /// The reason the applicant previously withdrew their application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("withdrawReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WithdrawReason { get; set; } = default!;

        /// <summary>
        /// The date that the applicant withdrew their application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("withdrawDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WithdrawDate { get; set; } = default!;

        /// <summary>
        /// The applicant's career goals
        /// </summary>
        [Newtonsoft.Json.JsonProperty("careerGoals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CareerGoals>? CareerGoals { get; set; } = default!;

        /// <summary>
        /// The factors influencing the applicant's decision.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decisionFactors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DecisionFactors>? DecisionFactors { get; set; } = default!;

        /// <summary>
        /// The source of the application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source Source { get; set; } = default!;

        /// <summary>
        /// Additional data (i.e. custom questions)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AdditionalData>? AdditionalData { get; set; } = default!;

        /// <summary>
        /// Flag indicating that application may be fraudulent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("possibleFraud", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PossibleFraud { get; set; } = default!;

        /// <summary>
        /// The associated Ethos Person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("person", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Person? Person { get; set; } = default!;

        /// <summary>
        /// The date on which the prospective student submitted the application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmittedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Name
    {
        /// <summary>
        /// The first name of the applicant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; } = default!;

        /// <summary>
        /// The applicant's middle name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; } = default!;

        /// <summary>
        /// The applicant's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; } = default!;

        /// <summary>
        /// The article or preposition portion of an applicant's last name. For example, \"De la\", \"Van\", or \"Van der Von\".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastNamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastNamePrefix { get; set; } = default!;

        /// <summary>
        /// The applicant's person's pedigree. For example, \"Jr.\" or \"Sr.\".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pedigree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pedigree { get; set; } = default!;

        /// <summary>
        /// The applicant's title. For example, \"Mr.\", \"Mrs.\", or \"Dr.\".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// Alternate names for the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlternateNames>? AlternateNames { get; set; } = default!;

        /// <summary>
        /// The applicant's preferred name or nickname.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreferredName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Demographics
    {
        /// <summary>
        /// The applicant's date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfBirth { get; set; } = default!;

        /// <summary>
        /// The applicant's ethnicity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ethnicity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ethnicity? Ethnicity { get; set; } = default!;

        /// <summary>
        /// The racial groups to which an applicant belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("races", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Races>? Races { get; set; } = default!;

        /// <summary>
        /// The biological masculinity or femininity of the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gender? Gender { get; set; } = default!;

        /// <summary>
        /// The applicant's self-selected gender identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genderIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenderIdentity? GenderIdentity { get; set; } = default!;

        /// <summary>
        /// The applicant's self-selected choice of pronoun.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalPronoun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalPronoun? PersonalPronoun { get; set; } = default!;

        /// <summary>
        /// The applicant's marital status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maritalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaritalStatus? MaritalStatus { get; set; } = default!;

        /// <summary>
        /// The applicant's religious affiliation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("religiousAffiliation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReligiousAffiliation? ReligiousAffiliation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Emails
    {
        /// <summary>
        /// A type of email for an applicant. Includes a standard type (e.g. 'personal', 'business') and an optional, custom type to further identify the type of email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type Type { get; set; } = default!;

        /// <summary>
        /// Specifies if the email is preferred over others of the same type or overall. Only one email should be set to primary for an applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference? Preference { get; set; } = default!;

        /// <summary>
        /// An email address for the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Phones
    {
        /// <summary>
        /// A type of phone for an applicant. Includes a standard type (e.g. 'mobile', 'home') and an optional, custom type to further identify the type of phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type2 Type { get; set; } = default!;

        /// <summary>
        /// The country calling code of telephone and/or mobile device when dialing internationally.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCallingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCallingCode { get; set; } = default!;

        /// <summary>
        /// The number assigned to the phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; } = default!;

        /// <summary>
        /// The extension used to connect to the phone when multiple phones share the same primary number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Extension { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Addresses
    {
        /// <summary>
        /// The first line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine1 { get; set; } = default!;

        /// <summary>
        /// The second line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine2 { get; set; } = default!;

        /// <summary>
        /// The third line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine3 { get; set; } = default!;

        /// <summary>
        /// The fourth line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine4 { get; set; } = default!;

        /// <summary>
        /// The locality of an address (ex. City)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locality { get; set; } = default!;

        /// <summary>
        /// The region of the address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Region? Region { get; set; } = default!;

        /// <summary>
        /// The subregion of the address (ex. County)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubRegion? SubRegion { get; set; } = default!;

        /// <summary>
        /// The country of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country? Country { get; set; } = default!;

        /// <summary>
        /// The postal code associated with the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; } = default!;

        /// <summary>
        /// The type of address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressesType Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Enrollment
    {
        /// <summary>
        /// The academic programs to which the applicant is applying
        /// </summary>
        [Newtonsoft.Json.JsonProperty("academicPrograms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AcademicPrograms>? AcademicPrograms { get; set; } = default!;

        /// <summary>
        /// The applicant's proposed major course of study.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("major", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Major? Major { get; set; } = default!;

        /// <summary>
        /// The applicant's secondary major.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondaryMajor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SecondaryMajor? SecondaryMajor { get; set; } = default!;

        /// <summary>
        /// The applicant's minor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Minor? Minor { get; set; } = default!;

        /// <summary>
        /// The applicant's concentration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("concentration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Concentration? Concentration { get; set; } = default!;

        /// <summary>
        /// The academic period for the which the applicant is applying.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("academicPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AcademicPeriod? AcademicPeriod { get; set; } = default!;

        /// <summary>
        /// The student type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("studentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StudentType? StudentType { get; set; } = default!;

        /// <summary>
        /// The locations of the campuses to which the applicant is applying
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campusLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CampusLocations>? CampusLocations { get; set; } = default!;

        /// <summary>
        /// The type code for this application
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ApplicationType { get; set; } = default!;

        /// <summary>
        /// The type of admission the applicant is requesting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("admissionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdmissionType? AdmissionType { get; set; } = default!;

        /// <summary>
        /// The applicant's proposed academic load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("academicLoad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AcademicLoad? AcademicLoad { get; set; } = default!;

        /// <summary>
        /// The applicant's educational goals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationalGoals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EducationalGoals>? EducationalGoals { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Citizenship
    {
        /// <summary>
        /// The citizenship status of the applicant with regards to the country where a given institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenshipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CitizenshipStatus? CitizenshipStatus { get; set; } = default!;

        /// <summary>
        /// The Visa details of the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visa? Visa { get; set; } = default!;

        /// <summary>
        /// The country in which the applicant was born.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryOfBirth? CountryOfBirth { get; set; } = default!;

        /// <summary>
        /// The city in which the applicant was born.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCity { get; set; } = default!;

        /// <summary>
        /// The applicant's native language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nativeLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NativeLanguage? NativeLanguage { get; set; } = default!;

        /// <summary>
        /// The applicant's primary language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryLanguage? PrimaryLanguage { get; set; } = default!;

        /// <summary>
        /// Other languages that the applicant understands
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondaryLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecondaryLanguages>? SecondaryLanguages { get; set; } = default!;

        /// <summary>
        /// The applicant's country of citizenship
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfCitizenship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CountryOfCitizenship>? CountryOfCitizenship { get; set; } = default!;

        /// <summary>
        /// The date the applicant entered the country where the institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryEntryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CountryEntryDate { get; set; } = default!;

        /// <summary>
        /// The applicant's passport number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passportNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PassportNumber { get; set; } = default!;

        /// <summary>
        /// The nation that issued the applicant's passport
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passportNationOfIssue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PassportNationOfIssue? PassportNationOfIssue { get; set; } = default!;

        /// <summary>
        /// The expiration date of the applicant's passport
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passportExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PassportExpirationDate { get; set; } = default!;

        /// <summary>
        /// The applicant's sponsor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sponsor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sponsor { get; set; } = default!;

        /// <summary>
        /// The applicant's foreign tax id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignTaxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ForeignTaxId { get; set; } = default!;

        /// <summary>
        /// Whether the applicant has a spouse
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalitySpouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CitizenshipNationalitySpouse? NationalitySpouse { get; set; } = default!;

        /// <summary>
        /// The applicant's number of children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfChildren", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NumberOfChildren { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Military
    {
        /// <summary>
        /// The date the applicant's military service began.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ServiceStartDate { get; set; } = default!;

        /// <summary>
        /// The date the applicant was discharged from the military.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfDischarge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfDischarge { get; set; } = default!;

        /// <summary>
        /// The applicant's veteran status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veteranStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VeteranStatus? VeteranStatus { get; set; } = default!;

        /// <summary>
        /// The applicant's veteran file number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veteranFileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VeteranFileNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecondarySchools
    {
        /// <summary>
        /// The institution attended
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution? Institution { get; set; } = default!;

        /// <summary>
        /// The date the applicant graduated from secondary school
        /// </summary>
        [Newtonsoft.Json.JsonProperty("graduatedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? GraduatedOn { get; set; } = default!;

        /// <summary>
        /// A measure of the applicant's performance (ex. GPA)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PerformanceMeasure { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendancePeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttendancePeriods>? AttendancePeriods { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PreviousInstitutions
    {
        /// <summary>
        /// An institution that the applicant previously attended
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Institution2? Institution { get; set; } = default!;

        /// <summary>
        /// The periods of attendance at a previous institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attendancePeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttendancePeriods2>? AttendancePeriods { get; set; } = default!;

        /// <summary>
        /// The measure of performance at an institution (ex. GPA)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("performanceMeasure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PerformanceMeasure { get; set; } = default!;

        /// <summary>
        /// The total number of credits earned at a previous institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCreditsEarned", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalCreditsEarned { get; set; } = default!;

        /// <summary>
        /// The credential granted to the applicant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentialReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CredentialReceived? CredentialReceived { get; set; } = default!;

        /// <summary>
        /// The date a credential was granted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentialEarnedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CredentialEarnedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParentsAndLegalGuardians
    {
        /// <summary>
        /// The parent or legal guardian's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmailAddress { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's education level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EducationLevel? EducationLevel { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address? Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResidencyType
    {
        /// <summary>
        /// The global identifier for the Residency Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegacyStatus
    {
        /// <summary>
        /// The global identifier for the Legacy Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Credentials
    {
        /// <summary>
        /// The type of credential
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CredentialsType? Type { get; set; } = default!;

        /// <summary>
        /// The credential value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

    }

    /// <summary>
    /// An applicant's interests.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Interests
    {
        /// <summary>
        /// The global identifier for the Interests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// Disability types or medical information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DisabilityTypes
    {
        /// <summary>
        /// The global identifier for the Disability Types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmergencyContacts
    {
        /// <summary>
        /// First name of the emergency contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; } = default!;

        /// <summary>
        /// Last name of the emergency contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; } = default!;

        /// <summary>
        /// Relationship of the emergency contact to the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Relationship? Relationship { get; set; } = default!;

        /// <summary>
        /// Email address of the emergency contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// Phone number of the emergency contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; } = default!;

    }

    /// <summary>
    /// The applicant's career goals
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CareerGoals
    {
        /// <summary>
        /// The global identifier for the Career Goals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// The factors influencing the applicant's decision.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DecisionFactors
    {
        /// <summary>
        /// The global identifier for the Decision Factors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Source
    {
        /// <summary>
        /// The global identifier for the One Of-1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalData
    {
        /// <summary>
        /// The name of the additional property
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PropertyName { get; set; } = default!;

        /// <summary>
        /// The property values
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? PropertyValues { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Person
    {
        /// <summary>
        /// The global identifier for the Person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternateNames
    {
        /// <summary>
        /// The alternate first name of the applicant
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateFirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateFirstName { get; set; } = default!;

        /// <summary>
        /// The applicant's alternate last name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateLastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternateLastName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ethnicity
    {
        /// <summary>
        /// The global identifier for the Ethnicity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// The racial groups to which an applicant belongs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Races
    {
        /// <summary>
        /// The global identifier for the Races.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Gender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenderIdentity
    {
        /// <summary>
        /// The global identifier for the Gender Identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalPronoun
    {
        /// <summary>
        /// The global identifier for the Personal Pronoun.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaritalStatus
    {
        /// <summary>
        /// The global identifier for the Marital Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReligiousAffiliation
    {
        /// <summary>
        /// The global identifier for the Religious Affiliation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"personal")]
        Personal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"school")]
        School = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"parent")]
        Parent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"family")]
        Family = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"sales")]
        Sales = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"support")]
        Support = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"legal")]
        Legal = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"media")]
        Media = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"matchingGifts")]
        MatchingGifts = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mobile")]
        Mobile = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"home")]
        Home = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"school")]
        School = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"vacation")]
        Vacation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fax")]
        Fax = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"pager")]
        Pager = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"tdd")]
        Tdd = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"parent")]
        Parent = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"family")]
        Family = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"main")]
        Main = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"branch")]
        Branch = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"region")]
        Region = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"support")]
        Support = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"matchingGifts")]
        MatchingGifts = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Region
    {
        /// <summary>
        /// The global identifier for the Region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubRegion
    {
        /// <summary>
        /// The global identifier for the Sub Region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country
    {
        /// <summary>
        /// The global identifier for the Country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"home")]
        Home = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"school")]
        School = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vacation")]
        Vacation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 3,

    }

    /// <summary>
    /// The academic programs to which the applicant is applying
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcademicPrograms
    {
        /// <summary>
        /// The global identifier for the Academic Programs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Major
    {
        /// <summary>
        /// The global identifier for the Major.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecondaryMajor
    {
        /// <summary>
        /// The global identifier for the Secondary Major.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Minor
    {
        /// <summary>
        /// The global identifier for the Minor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Concentration
    {
        /// <summary>
        /// The global identifier for the Concentration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcademicPeriod
    {
        /// <summary>
        /// The global identifier for the Academic Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StudentType
    {
        /// <summary>
        /// The global identifier for the Student Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// The locations of the campuses to which the applicant is applying
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CampusLocations
    {
        /// <summary>
        /// The global identifier for the Campus Locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdmissionType
    {
        /// <summary>
        /// The global identifier for the Admission Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AcademicLoad
    {

        [System.Runtime.Serialization.EnumMember(Value = @"fullTime")]
        FullTime = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"partTime")]
        PartTime = 1,

    }

    /// <summary>
    /// The applicant's educational goals.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EducationalGoals
    {
        /// <summary>
        /// The global identifier for the Educational Goals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CitizenshipStatus
    {
        /// <summary>
        /// The global identifier for the Citizenship Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Visa
    {
        /// <summary>
        /// Visa type of the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VisaType? VisaType { get; set; } = default!;

        /// <summary>
        /// The identifier number of the visa.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VisaId { get; set; } = default!;

        /// <summary>
        /// The date when the visa was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? IssuedOn { get; set; } = default!;

        /// <summary>
        /// The date when the visa will expire.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiresOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiresOn { get; set; } = default!;

        /// <summary>
        /// The applicant's alien registration number if non-citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AlienRegistrationNumber { get; set; } = default!;

        /// <summary>
        /// The applicant's alien registration issue date if non-citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AlienRegistrationIssueDate { get; set; } = default!;

        /// <summary>
        /// The applicant's alien registration expiration date if non-citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AlienRegistrationExpirationDate { get; set; } = default!;

        /// <summary>
        /// The visa start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        /// <summary>
        /// The authority that issued the visa
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuingAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IssuingAuthority { get; set; } = default!;

        /// <summary>
        /// The country in which the applicant was born.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CountryOfBirth2? CountryOfBirth { get; set; } = default!;

        /// <summary>
        /// The port of entry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("portOfEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PortOfEntry { get; set; } = default!;

        /// <summary>
        /// The type of employment for which a visa was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmploymentType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CountryOfBirth
    {
        /// <summary>
        /// The global identifier for the Country of Birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NativeLanguage
    {
        /// <summary>
        /// The global identifier for the Native Language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryLanguage
    {
        /// <summary>
        /// The global identifier for the Primary Language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// Other languages that the applicant understands
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecondaryLanguages
    {
        /// <summary>
        /// The global identifier for the Secondary Languages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// The applicant's country of citizenship
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CountryOfCitizenship
    {
        /// <summary>
        /// The global identifier for the Country Of Citizenship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PassportNationOfIssue
    {
        /// <summary>
        /// The global identifier for the Passport Nation Of Issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CitizenshipNationalitySpouse
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notReported")]
        NotReported = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"yes")]
        Yes = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"no")]
        No = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VeteranStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nonVeteran")]
        NonVeteran = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"activeDuty")]
        ActiveDuty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"protectedVeteran")]
        ProtectedVeteran = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"nonProtectedVeteran")]
        NonProtectedVeteran = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Institution
    {
        /// <summary>
        /// The global identifier for the Institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttendancePeriods
    {
        /// <summary>
        /// The start date for the attendance period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        /// <summary>
        /// The end date for the attendance period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Institution2
    {
        /// <summary>
        /// The global identifier for the Institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttendancePeriods2
    {
        /// <summary>
        /// The date the attendance period started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartOn { get; set; } = default!;

        /// <summary>
        /// The data the attendance period ended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CredentialReceived
    {
        /// <summary>
        /// The global identifier for the Credential Received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EducationLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"middleSchool")]
        MiddleSchool = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highSchool")]
        HighSchool = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"college")]
        College = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// A region within the country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Region2? Region { get; set; } = default!;

        /// <summary>
        /// The subregion within a region (ex. county)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subregion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subregion? Subregion { get; set; } = default!;

        /// <summary>
        /// The country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country2? Country { get; set; } = default!;

        /// <summary>
        /// The city or town name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Locality { get; set; } = default!;

        /// <summary>
        /// The postal code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; } = default!;

        /// <summary>
        /// The type of address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressType? AddressType { get; set; } = default!;

        /// <summary>
        /// The first line of the parent or guardian's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine1 { get; set; } = default!;

        /// <summary>
        /// The second line of the parent or guardian's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine2 { get; set; } = default!;

        /// <summary>
        /// The third line of the parent or guardian's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine3 { get; set; } = default!;

        /// <summary>
        /// The fourth line of the parent or guardian's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine4 { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CredentialsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ssn")]
        Ssn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sin")]
        Sin = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tin")]
        Tin = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Relationship
    {
        /// <summary>
        /// The global identifier for the Relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VisaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"immigrant")]
        Immigrant = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nonImmigrant")]
        NonImmigrant = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CountryOfBirth2
    {
        /// <summary>
        /// The global identifier for the Country of Birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Region2
    {
        /// <summary>
        /// The global identifier for the Region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subregion
    {
        /// <summary>
        /// The global identifier for the Subregion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country2
    {
        /// <summary>
        /// The global identifier for the Country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"home")]
        Home = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"school")]
        School = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vacation")]
        Vacation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"shipping")]
        Shipping = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"mailing")]
        Mailing = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"parent")]
        Parent = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"family")]
        Family = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"pobox")]
        Pobox = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"main")]
        Main = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"branch")]
        Branch = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"region")]
        Region = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"support")]
        Support = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"matchingGifts")]
        MatchingGifts = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 15,

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603