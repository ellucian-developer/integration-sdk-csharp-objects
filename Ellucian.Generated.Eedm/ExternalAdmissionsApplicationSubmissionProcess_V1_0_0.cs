//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Ellucian.Generated.Eedm;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ellucian.Generated.Eedm.ExternalAdmissionsApplicationSubmissionProcess_V1_0_0
{
    using System = global::System;

    

    /// <summary>
    /// The submission of external admissions applications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExternalAdmissionsApplicationSubmissionProcess_V1_0_0
    {
        /// <summary>
        /// Metadata about the JSON payload
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata? Metadata { get; set; } = default!;

        /// <summary>
        /// The unique identifier for a single application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ApplicationId { get; set; } = default!;

        /// <summary>
        /// The unique identifier for a single user’s account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cccId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CccId { get; set; } = default!;

        /// <summary>
        /// The system’s identifier for a particular California Community College.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collegeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CollegeId { get; set; } = default!;

        /// <summary>
        /// The applicant's name information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Name Name { get; set; } = new Name();

        /// <summary>
        /// The applicant's demographic information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("demographics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Demographics? Demographics { get; set; } = default!;

        /// <summary>
        /// The email addresses at which an applicant can be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Emails> Emails { get; set; } = new System.Collections.ObjectModel.Collection<Emails>();

        /// <summary>
        /// The phones and phone-connected devices at which an applicant can be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Phones>? Phones { get; set; } = default!;

        /// <summary>
        /// The physical addresses where an applicant resides or may be contacted by mail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Addresses>? Addresses { get; set; } = default!;

        /// <summary>
        /// The applicant's enrollment information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enrollment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Enrollment? Enrollment { get; set; } = default!;

        /// <summary>
        /// The applicant's citizenship information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Citizenship? Citizenship { get; set; } = default!;

        /// <summary>
        /// Military service information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("military", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Military? Military { get; set; } = default!;

        /// <summary>
        /// Applicant's high school realted information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highSchoolInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HighSchoolInformation? HighSchoolInformation { get; set; } = default!;

        /// <summary>
        /// Applicant's college related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collegeInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollegeInformation>? CollegeInformation { get; set; } = default!;

        /// <summary>
        /// The applicant's parents or legal guardians.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentsAndLegalGuardians", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParentsAndLegalGuardians>? ParentsAndLegalGuardians { get; set; } = default!;

        /// <summary>
        /// The applicant's residency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Residency? Residency { get; set; } = default!;

        /// <summary>
        /// The applicant's legacy status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legacyStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LegacyStatus { get; set; } = default!;

        /// <summary>
        /// Personal identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Credentials>? Credentials { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant intends to apply for financial aid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("financialAid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FinancialAid { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant is interested in campus housing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campusHousing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CampusHousing { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant is a first generation applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstGenerationApplicant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FirstGenerationApplicant { get; set; } = default!;

        /// <summary>
        /// Indicates whether applicant has previously attended the institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previouslyAttended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PreviouslyAttended { get; set; } = default!;

        /// <summary>
        /// An applicant's interests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Interests { get; set; } = default!;

        /// <summary>
        /// Disability types or medical information.’
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabilityTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DisabilityTypes { get; set; } = default!;

        /// <summary>
        /// Has applicant been convicted of a felony
        /// </summary>
        [Newtonsoft.Json.JsonProperty("felony", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Felony { get; set; } = default!;

        /// <summary>
        /// Indicates is applicant has been the subject of disciplinary action at a previous institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disciplinaryAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisciplinaryAction { get; set; } = default!;

        /// <summary>
        /// The applicant's emergency contacts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emergencyContacts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EmergencyContacts>? EmergencyContacts { get; set; } = default!;

        /// <summary>
        /// The applicant's career goals.’
        /// </summary>
        [Newtonsoft.Json.JsonProperty("careerGoals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? CareerGoals { get; set; } = default!;

        /// <summary>
        /// The factors influencing the applicant's decision.’
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decisionFactors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? DecisionFactors { get; set; } = default!;

        /// <summary>
        /// Applicant's needs and interests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("needsAndInterests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NeedsAndInterests? NeedsAndInterests { get; set; } = default!;

        /// <summary>
        /// Application submission information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submissionInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubmissionInformation? SubmissionInformation { get; set; } = default!;

        /// <summary>
        /// Indicates the origin of the application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Source { get; set; } = default!;

        /// <summary>
        /// Indicates the type of application like CCCApply, Apply etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; } = default!;

        /// <summary>
        /// Additional data that can be used for reporting, including custom fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AdditionalData { get; set; } = default!;

        /// <summary>
        /// Indicates if the application is suspected to be fraudulent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domainListing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalAdmissionsApplicationSubmissionProcess_V1_0_0DomainListing? DomainListing { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Name
    {
        /// <summary>
        /// The applicant's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; } = default!;

        /// <summary>
        /// The applicant's middle name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; } = default!;

        /// <summary>
        /// The applicant's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; } = default!;

        /// <summary>
        /// The article or preposition portion of an applicant's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastNamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastNamePrefix { get; set; } = default!;

        /// <summary>
        /// The applicant's suffix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Suffix { get; set; } = default!;

        /// <summary>
        /// The applicant's prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Prefix { get; set; } = default!;

        /// <summary>
        /// Alternate first names for the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateFirstNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? AlternateFirstNames { get; set; } = default!;

        /// <summary>
        /// Alternate last names for the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateLastNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? AlternateLastNames { get; set; } = default!;

        /// <summary>
        /// Alternate last names for the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternateMiddleNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? AlternateMiddleNames { get; set; } = default!;

        /// <summary>
        /// The applicant's preferred first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredFirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreferredFirstName { get; set; } = default!;

        /// <summary>
        /// The applicant's preferred last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredLastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreferredLastName { get; set; } = default!;

        /// <summary>
        /// The applicant's preferred middle name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preferredMiddleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PreferredMiddleName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Demographics
    {
        /// <summary>
        /// The applicant's date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfBirth { get; set; } = default!;

        /// <summary>
        /// The applicant's ethnicities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ethnicities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Ethnicities { get; set; } = default!;

        /// <summary>
        /// The racial groups to which an applicant belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("races", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Races { get; set; } = default!;

        /// <summary>
        /// Indicates if the applicant is hispanic.’
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hispanic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Hispanic { get; set; } = default!;

        /// <summary>
        /// The biological masculinity or femininity of the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Gender { get; set; } = default!;

        /// <summary>
        /// The applicant's self-selected gender identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genderIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GenderIdentity { get; set; } = default!;

        /// <summary>
        /// The applicant's identity in relation to the gender or genders to which they are attracted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sexualOrientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SexualOrientation { get; set; } = default!;

        /// <summary>
        /// The applicant's self-selected choice of pronoun.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalPronoun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalPronoun { get; set; } = default!;

        /// <summary>
        /// The applicant's marital status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maritalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MaritalStatus { get; set; } = default!;

        /// <summary>
        /// The applicant's religious affiliation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("religiousAffiliation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ReligiousAffiliation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Emails
    {
        /// <summary>
        /// Indicates the type of email address of an applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// An email address for the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Phones
    {
        /// <summary>
        /// Indicates the type of phone number of an applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// The countrycode of telephone and/or mobile device when dialing internationally.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCode { get; set; } = default!;

        /// <summary>
        /// The number assigned to the phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; } = default!;

        /// <summary>
        /// The extension used to connect to the phone when multiple phones share the same primary number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Extension { get; set; } = default!;

        /// <summary>
        /// Indicates user’s permission to send text messages to the phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textPermission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TextPermission { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Addresses
    {
        /// <summary>
        /// The type of address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// The first line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine1 { get; set; } = default!;

        /// <summary>
        /// The second line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine2 { get; set; } = default!;

        /// <summary>
        /// The third line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine3 { get; set; } = default!;

        /// <summary>
        /// The fourth line of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine4 { get; set; } = default!;

        /// <summary>
        /// The city of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The county of an applicant's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? County { get; set; } = default!;

        /// <summary>
        /// The postal code of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; } = default!;

        /// <summary>
        /// The state of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        /// <summary>
        /// The country of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Enrollment
    {
        /// <summary>
        /// The term for which the applicant is applying.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("term", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Term { get; set; } = default!;

        /// <summary>
        /// The applicant's proposed major course of study.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("major", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Major { get; set; } = default!;

        /// <summary>
        /// The applicant's secondary major.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondaryMajor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SecondaryMajor { get; set; } = default!;

        /// <summary>
        /// The applicant's minor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Minor { get; set; } = default!;

        /// <summary>
        /// The applicant's concentration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("concentration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Concentration { get; set; } = default!;

        /// <summary>
        /// The student type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("studentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StudentType { get; set; } = default!;

        /// <summary>
        /// The location of the campus to which the applicant is applying
        /// </summary>
        [Newtonsoft.Json.JsonProperty("campusLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CampusLocation { get; set; } = default!;

        /// <summary>
        /// The type of admission the applicant is requesting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("admissionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AdmissionType { get; set; } = default!;

        /// <summary>
        /// The applicant's proposed academic load.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("academicLoad", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AcademicLoad { get; set; } = default!;

        /// <summary>
        /// The applicant's educational goals.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationalGoals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? EducationalGoals { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Citizenship
    {
        /// <summary>
        /// The citizenship status of the applicant with regards to the country where a given institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenshipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CitizenshipStatus { get; set; } = default!;

        /// <summary>
        /// The applicant's first citizenship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryCitizenship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PrimaryCitizenship { get; set; } = default!;

        /// <summary>
        /// The Visa details of the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visa? Visa { get; set; } = default!;

        /// <summary>
        /// The country in which the applicant was born.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryOfBirth { get; set; } = default!;

        /// <summary>
        /// The city in which the applicant was born.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthCity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BirthCity { get; set; } = default!;

        /// <summary>
        /// The applicant's native language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nativeLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NativeLanguage { get; set; } = default!;

        /// <summary>
        /// The applicant's primary language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PrimaryLanguage { get; set; } = default!;

        /// <summary>
        /// Other languages that the applicant understands.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secondaryLanguages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? SecondaryLanguages { get; set; } = default!;

        /// <summary>
        /// The date the applicant entered the country where the institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryEntryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CountryEntryDate { get; set; } = default!;

        /// <summary>
        /// The applicant's passport number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passportNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PassportNumber { get; set; } = default!;

        /// <summary>
        /// The nation that issued the applicant's passport
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passportNationOfIssue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PassportNationOfIssue { get; set; } = default!;

        /// <summary>
        /// The expiration date of the applicant's passport
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passportExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PassportExpirationDate { get; set; } = default!;

        /// <summary>
        /// The applicant's sponsor
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sponsor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sponsor { get; set; } = default!;

        /// <summary>
        /// The applicant's foreign tax id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignTaxId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ForeignTaxId { get; set; } = default!;

        /// <summary>
        /// The applicant's spouse's nationality
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationalitySpouse", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NationalitySpouse { get; set; } = default!;

        /// <summary>
        /// The applicant's number of children.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfChildren", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfChildren { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Military
    {
        /// <summary>
        /// The applicant’s Military Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("militaryStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MilitaryStatus { get; set; } = default!;

        /// <summary>
        /// The date the applicant's military service began.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ServiceStartDate { get; set; } = default!;

        /// <summary>
        /// The date the applicant was discharged from the military.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfDischarge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfDischarge { get; set; } = default!;

        /// <summary>
        /// The applicant’s Home of Record
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homeState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HomeState { get; set; } = default!;

        /// <summary>
        /// The applicant's veteran status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veteranStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VeteranStatus { get; set; } = default!;

        /// <summary>
        /// The applicant's veteran file number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veteranFileNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VeteranFileNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HighSchoolInformation
    {
        /// <summary>
        /// High schools attended by the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highSchool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HighSchool>? HighSchool { get; set; } = default!;

        /// <summary>
        /// Applicant's high school transcript details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transcript", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transcript? Transcript { get; set; } = default!;

        /// <summary>
        /// Applicant's higher and highest education level related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EducationLevel? EducationLevel { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollegeInformation
    {
        /// <summary>
        /// Name of College/University.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// CDS code of the College/University.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cdsCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CdsCode { get; set; } = default!;

        /// <summary>
        /// City of College/University.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        /// <summary>
        /// State of College/University.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        /// <summary>
        /// CEEB code of the College/University.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceeb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ceeb { get; set; } = default!;

        /// <summary>
        /// Applicant’s grade point average (GPA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gpa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Gpa { get; set; } = default!;

        /// <summary>
        /// Applicant’s total credit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCredit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TotalCredit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendancePeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttendancePeriods>? AttendancePeriods { get; set; } = default!;

        /// <summary>
        /// The date the applicant was awarded the degree.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("degreeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DegreeDate { get; set; } = default!;

        /// <summary>
        /// Indicates if the applicant obtained the degree.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("degreeObtained", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DegreeObtained { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ParentsAndLegalGuardians
    {
        /// <summary>
        /// The parent or legal guardian's first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's middle name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's Relationship to the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Relationship { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's phone number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's education level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EducationLevel { get; set; } = default!;

        /// <summary>
        /// Concatenation of parent/guardians Education Level: MIS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationLevelMis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EducationLevelMis { get; set; } = default!;

        /// <summary>
        /// The parent or legal guardian's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address? Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Residency
    {
        /// <summary>
        /// Applicant’s residency status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("residencyStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ResidencyStatus { get; set; } = default!;

        /// <summary>
        /// Applicant’s eligibility for admission as calculated by the Submission Calculation Service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eligibleForAB540Waiver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EligibleForAB540Waiver { get; set; } = default!;

        /// <summary>
        /// Indicates if the applicant has been determined to be a homeless youth at any time within the last 24 months.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homelessYouth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HomelessYouth { get; set; } = default!;

        /// <summary>
        /// Indicates if the applicant has been employed as a seasonal agricultural worker for at least a total of two months of each of the past two years.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seasonalAgriculturalWorker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SeasonalAgriculturalWorker { get; set; } = default!;

        /// <summary>
        /// Indicates the Foster Youth status of the applicant based on their screen input.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fosterYouthStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FosterYouthStatus { get; set; } = default!;

        /// <summary>
        /// Derived field based on foster fosterYouthStatus.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fosterYouthMis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FosterYouthMis { get; set; } = default!;

        /// <summary>
        /// Indicates if the applicant has shown any interest in or need for financial aid, as determined by the Submission Calculation Service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finAidRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FinAidRef { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Credentials
    {
        /// <summary>
        /// The type of credential
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CredentialsType? Type { get; set; } = default!;

        /// <summary>
        /// The credential value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmergencyContacts
    {
        /// <summary>
        /// First name of the emergency contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// Last name of the emergency contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// Relationship of the emergency contact to the applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Relationship { get; set; } = default!;

        /// <summary>
        /// Phone number of the emergency contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NeedsAndInterests
    {
        /// <summary>
        /// Indicates applicant's comfort level in reading/writing English.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comfortableWithEnglish", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ComfortableWithEnglish { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in academic advising.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("academicCounseling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcademicCounseling { get; set; } = default!;

        /// <summary>
        /// Indicates aplicant's interest in intercollegiate team sports participation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("athleticInterestIntercollegiate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AthleticInterestIntercollegiate { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in assistance with reading, writing, or math.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("basicSkills", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BasicSkills { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in CalWORKs monetary aid and services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calWorks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CalWorks { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in career planning assistance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("careerPlanning", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CareerPlanning { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in child care assistance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childCare", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ChildCare { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in personal counseling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("counselingPersonal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CounselingPersonal { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in disabled student programs and services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dsps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Dsps { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in extended opportunity programs and services (academic, financial, and/or encouragement for eligible students).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eops", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Eops { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in English as a second language support and/or programs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("esl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Esl { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in health services
        /// </summary>
        [Newtonsoft.Json.JsonProperty("healthServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HealthServices { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in employment assistance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentAssistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EmploymentAssistance { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in online classes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("onlineClasses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OnlineClasses { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in reentry programs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reEntryProgram", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReEntryProgram { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in scholarship information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scholarshipInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ScholarshipInformation { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in student government.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("studentGovernment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StudentGovernment { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in testing., assessment, or orientation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("testingAssessment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TestingAssessment { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in transfer information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transferInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TransferInformation { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in tutoring services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tutoringServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TutoringServices { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in veterans services.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veteransServices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VeteransServices { get; set; } = default!;

        /// <summary>
        /// Indicates applicant's interest in intramural sports participation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("athleticInterestIntramural", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AthleticInterestIntramural { get; set; } = default!;

        /// <summary>
        /// To assess if the applicant is currently receiving TANF/CalWORKs, SSI, or General Assistance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("receivingTanfSsiGa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReceivingTanfSsiGa { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubmissionInformation
    {
        /// <summary>
        /// Indicates applicant's consent to Release Information question.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("consentIndicator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ConsentIndicator { get; set; } = default!;

        /// <summary>
        /// Confirmation Number assigned by the system when the application is submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Confirmation { get; set; } = default!;

        /// <summary>
        /// Identifies status of the Non-Credit Application path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonCredit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NonCredit { get; set; } = default!;

        /// <summary>
        /// Questions certified by the applicant during application submission
        /// </summary>
        [Newtonsoft.Json.JsonProperty("certificationQuestions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? CertificationQuestions { get; set; } = default!;

        /// <summary>
        /// Confirmation that applicant has provided the required electronic signature for submission of the application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eSignature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ESignature { get; set; } = default!;

        /// <summary>
        /// The state of the language toggle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languageFlag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LanguageFlag { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExternalAdmissionsApplicationSubmissionProcess_V1_0_0DomainListing
    {

        [System.Runtime.Serialization.EnumMember(Value = @"approved")]
        Approved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"denied")]
        Denied = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"potential")]
        Potential = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Visa
    {
        /// <summary>
        /// Applicant’s Visa Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VisaType { get; set; } = default!;

        /// <summary>
        /// The identifier number of the visa.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VisaNumber { get; set; } = default!;

        /// <summary>
        /// The date when the visa was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? IssuedOn { get; set; } = default!;

        /// <summary>
        /// The visa start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        /// <summary>
        /// The date when the visa will expire.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiresOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiresOn { get; set; } = default!;

        /// <summary>
        /// The applicant's alien registration number if non-citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AlienRegistrationNumber { get; set; } = default!;

        /// <summary>
        /// The applicant's alien registration issue date if non-citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationIssueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AlienRegistrationIssueDate { get; set; } = default!;

        /// <summary>
        /// The applicant's alien registration expiration date if non-citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alienRegistrationExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? AlienRegistrationExpirationDate { get; set; } = default!;

        /// <summary>
        /// The authority that issued the visa.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuingAuthority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IssuingAuthority { get; set; } = default!;

        /// <summary>
        /// The nation that issued the visa.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visaNationOfIssue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VisaNationOfIssue { get; set; } = default!;

        /// <summary>
        /// The port of entry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("portOfEntry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PortOfEntry { get; set; } = default!;

        /// <summary>
        /// The type of employment for which a visa was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EmploymentType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HighSchool
    {
        /// <summary>
        /// Name of High School.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// City of High School.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        /// <summary>
        /// State of High School.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        /// <summary>
        /// High school’s CEEB code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ceebCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CeebCode { get; set; } = default!;

        /// <summary>
        /// High school’s CDS code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cdsCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CdsCode { get; set; } = default!;

        /// <summary>
        /// The date the applicant graduated from high school.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("graduatedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? GraduatedOn { get; set; } = default!;

        /// <summary>
        /// Applicant’s grade point average (GPA).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gpa", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Gpa { get; set; } = default!;

        /// <summary>
        /// Applicant’s Attendance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attendance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Attendance { get; set; } = default!;

        /// <summary>
        /// Applicant’s High School Education Level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EducationLevel { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("attendancePeriods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttendancePeriods2>? AttendancePeriods { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transcript
    {
        /// <summary>
        /// Applicant’s highest high school grade completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestGradeCompleted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HighestGradeCompleted { get; set; } = default!;

        /// <summary>
        /// Applicant’s highest English course taken in high school.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestEnglishCourseTaken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HighestEnglishCourseTaken { get; set; } = default!;

        /// <summary>
        /// Applicant’s grade received in the highest English course taken in high school.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestEnglishGrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HighestEnglishGrade { get; set; } = default!;

        /// <summary>
        /// Applicant’s highest math course passed with a Pass in high school.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestMathCoursePassed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HighestMathCoursePassed { get; set; } = default!;

        /// <summary>
        /// Applicant’s highest math course taken in high school.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestMathCourseTaken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HighestMathCourseTaken { get; set; } = default!;

        /// <summary>
        /// Applicant’s grade received for highest math course passed in high school with a Pass.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestMathCoursePassedGrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HighestMathCoursePassedGrade { get; set; } = default!;

        /// <summary>
        /// Applicant’s grade received for highest math course taken in high school.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestMathGrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HighestMathGrade { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EducationLevel
    {
        /// <summary>
        /// Applicant’s Higher Education Level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("higherEducationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HigherEducationLevel { get; set; } = default!;

        /// <summary>
        /// Applicant’s Higher Education Degree Date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("higherEducationCompletionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HigherEducationCompletionDate { get; set; } = default!;

        /// <summary>
        /// Applicant's highest education level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestEducationLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HighestEducationLevel { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttendancePeriods
    {
        /// <summary>
        /// The start date for the attendance period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        /// <summary>
        /// The end date for the attendance period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// The type of address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// The first line of the parent or guardian's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine1 { get; set; } = default!;

        /// <summary>
        /// The second line of the parent or guardian's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine2 { get; set; } = default!;

        /// <summary>
        /// The third line of the parent or guardian's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine3 { get; set; } = default!;

        /// <summary>
        /// The fourth line of the parent or guardian's address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine4 { get; set; } = default!;

        /// <summary>
        /// The city or town name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? City { get; set; } = default!;

        /// <summary>
        /// The county name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("county", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? County { get; set; } = default!;

        /// <summary>
        /// The postal code of the addres.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PostalCode { get; set; } = default!;

        /// <summary>
        /// The state of the address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? State { get; set; } = default!;

        /// <summary>
        /// The country of the addres.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Country { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CredentialsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ssn")]
        Ssn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sin")]
        Sin = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tin")]
        Tin = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttendancePeriods2
    {
        /// <summary>
        /// The start date for the attendance period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        /// <summary>
        /// The end date for the attendance period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603