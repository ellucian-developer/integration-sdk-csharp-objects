//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Ellucian.Generated.Eedm;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ellucian.Generated.Eedm.Persons_V12_2_0
{
    using System = global::System;

    

    /// <summary>
    /// An individual who interacts independently with the institution in a variety of roles (for example, "student", "constituent", or "vendor").
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Persons_V12_2_0
    {
        /// <summary>
        /// Metadata about the JSON payload
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata? Metadata { get; set; } = default!;

        /// <summary>
        /// A global identifier of a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// A privacy status of person's information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivacyStatus? PrivacyStatus { get; set; } = default!;

        /// <summary>
        /// The names associated with a person, specified by type (for example, "legal" or "birth").
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Names> Names { get; set; } = new System.Collections.ObjectModel.Collection<Names>();

        /// <summary>
        /// The date when a person was born.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfBirth { get; set; } = default!;

        /// <summary>
        /// The date when a person died.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateDeceased", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateDeceased { get; set; } = default!;

        /// <summary>
        /// The biological masculinity or femininity of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gender? Gender { get; set; } = default!;

        /// <summary>
        /// The person's self-selected gender identification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genderIdentity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GenderIdentity? GenderIdentity { get; set; } = default!;

        /// <summary>
        /// The person's self-selected choice of pronoun.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalPronoun", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PersonalPronoun? PersonalPronoun { get; set; } = default!;

        /// <summary>
        /// The religion of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("religion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Religion? Religion { get; set; } = default!;

        /// <summary>
        /// The ethnicity association of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ethnicity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ethnicity? Ethnicity { get; set; } = default!;

        /// <summary>
        /// The racial groups to which a person belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("races", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Races>? Races { get; set; } = default!;

        /// <summary>
        /// The languages the person has certain degree of proficiency in
        /// </summary>
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Languages>? Languages { get; set; } = default!;

        /// <summary>
        /// The current marital state (for example, single, married, or divorced) of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maritalStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MaritalStatus? MaritalStatus { get; set; } = default!;

        /// <summary>
        /// The current veteran status of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("veteranStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VeteranStatus? VeteranStatus { get; set; } = default!;

        /// <summary>
        /// The citizenship status of the person with regards to the country where a given institution is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenshipStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CitizenshipStatus? CitizenshipStatus { get; set; } = default!;

        /// <summary>
        /// The ISO 3166-1 alpha-3 code of the country which the person was born in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryOfBirth { get; set; } = default!;

        /// <summary>
        /// The ISO 3166-1 alpha-3 code of the country in which the person is a citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenshipCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CitizenshipCountry { get; set; } = default!;

        /// <summary>
        /// The roles that a person fills as he/she interacts with the institution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Roles>? Roles { get; set; } = default!;

        /// <summary>
        /// Person's government issued identity documents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityDocuments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IdentityDocuments>? IdentityDocuments { get; set; } = default!;

        /// <summary>
        /// Information that identifies a user to a system such as a network or computer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Credentials>? Credentials { get; set; } = default!;

        /// <summary>
        /// Alternative information that uniquely identifies a user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternativeCredentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlternativeCredentials>? AlternativeCredentials { get; set; } = default!;

        /// <summary>
        /// Interests recorded for this person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Interests>? Interests { get; set; } = default!;

        /// <summary>
        /// The physical addresses where a person resides or may be contacted by mail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Addresses>? Addresses { get; set; } = default!;

        /// <summary>
        /// The phones and phone-connected devices at which a person can be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Phones>? Phones { get; set; } = default!;

        /// <summary>
        /// The email addresses at which a person can be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Emails>? Emails { get; set; } = default!;

        /// <summary>
        /// The social media account at which a person can be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialMedia", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SocialMedia>? SocialMedia { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivacyStatus
    {
        /// <summary>
        /// The global category of information privacy protection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PrivacyStatusPrivacyCategory PrivacyCategory { get; set; } = default!;

        /// <summary>
        /// Details about the privacy status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Names
    {
        /// <summary>
        /// The type of a person's name being defined. For example, a "Primary" name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type? Type { get; set; } = default!;

        /// <summary>
        /// Indicates the preferred name for the person. Only one name should be set to preferred for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference? Preference { get; set; } = default!;

        /// <summary>
        /// The person's full name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fullName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; } = default!;

        /// <summary>
        /// The person's title. For example, "Mr.", "Mrs.", or "Dr.".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// The person's first, or given, name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FirstName { get; set; } = default!;

        /// <summary>
        /// The person's middle name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("middleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MiddleName { get; set; } = default!;

        /// <summary>
        /// The article or preposition portion of a person's last name. For example, "De la", "Van", or "Van der Von".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastNamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastNamePrefix { get; set; } = default!;

        /// <summary>
        /// The person's last, or family, name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LastName { get; set; } = default!;

        /// <summary>
        /// The person's pedigree. For example, "Jr." or "Sr.".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pedigree", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pedigree { get; set; } = default!;

        /// <summary>
        /// A post-nominal professional abbreviation, reflecting an earned degree or honor. For example, "M.D." or "Ph.D.".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("professionalAbbreviations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? ProfessionalAbbreviations { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Gender
    {

        [System.Runtime.Serialization.EnumMember(Value = @"male")]
        Male = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"female")]
        Female = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GenderIdentity
    {
        /// <summary>
        /// The global identifier for the Gender Identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PersonalPronoun
    {
        /// <summary>
        /// The global identifier for the Personal Pronoun.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Religion
    {
        /// <summary>
        /// The global identifier for the Religion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ethnicity
    {
        /// <summary>
        /// The ethnic group with which the person identifies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ethnicGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EthnicGroup? EthnicGroup { get; set; } = default!;

        /// <summary>
        /// Properties required for governmental or other reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Reporting>? Reporting { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Races
    {
        /// <summary>
        /// The race to which a person belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("race", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Race? Race { get; set; } = default!;

        /// <summary>
        /// Properties required for governmental or other reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Reporting2>? Reporting { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Languages
    {
        /// <summary>
        /// The ISO 639-3 alpha-3 language code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; } = default!;

        /// <summary>
        /// Language preference indicator. Only one language should be set to primary for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference2? Preference { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MaritalStatus
    {
        /// <summary>
        /// The higher-level marital category of the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maritalCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MaritalStatusMaritalCategory MaritalCategory { get; set; } = default!;

        /// <summary>
        /// A user defined marital status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail2? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VeteranStatus
    {
        /// <summary>
        /// The name of a higher level veteran status category to which the status belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VeteranStatusCategory Category { get; set; } = default!;

        /// <summary>
        /// A user defined status of a person's military service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail3? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CitizenshipStatus
    {
        /// <summary>
        /// A global category of citizenship statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CitizenshipStatusCategory Category { get; set; } = default!;

        /// <summary>
        /// A user defined citizenship status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail4? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Roles
    {
        /// <summary>
        /// The actions and activities assigned to, required of, or expected of a person. For example, the roles of "Faculty" or "Student".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RolesRole Role { get; set; } = default!;

        /// <summary>
        /// The date when a person starts filling a role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartOn { get; set; } = default!;

        /// <summary>
        /// The date when a person stops filling a role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityDocuments
    {
        /// <summary>
        /// The country where the document was issued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country? Country { get; set; } = default!;

        /// <summary>
        /// The identity document type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type2 Type { get; set; } = new Type2();

        /// <summary>
        /// The identification code or number of the document
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentId { get; set; } = default!;

        /// <summary>
        /// The document expiration date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expiresOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiresOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Credentials
    {
        /// <summary>
        /// The type of credential, such as "Person ID", "System ID", etc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CredentialsType Type { get; set; } = default!;

        /// <summary>
        /// The current value of the credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; } = default!;

        /// <summary>
        /// The date when the credential starts being valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartOn { get; set; } = default!;

        /// <summary>
        /// The date when the credential stops being valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlternativeCredentials
    {
        /// <summary>
        /// The type of alternative credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type3? Type { get; set; } = default!;

        /// <summary>
        /// The value of the alternative credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; } = default!;

    }

    /// <summary>
    /// Interests recorded for this person.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Interests
    {
        /// <summary>
        /// The global identifier for the Interests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Addresses
    {
        /// <summary>
        /// The associated physical address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; } = default!;

        /// <summary>
        /// A type of address for a person. Includes a standard type (e.g. 'home', 'school') and an optional, custom type to further identify the type of address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type4 Type { get; set; } = new Type4();

        /// <summary>
        /// The earliest date that this address was valid for the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartOn { get; set; } = default!;

        /// <summary>
        /// The latest date when this address was valid for the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOn { get; set; } = default!;

        /// <summary>
        /// Specifies if the address is preferred over others of the same type. Only one address should be set to primary for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference3? Preference { get; set; } = default!;

        /// <summary>
        /// Seasons during the year when the location is typically occupied, expressed as repeating time periods.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("seasonalOccupancies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SeasonalOccupancies>? SeasonalOccupancies { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Phones
    {
        /// <summary>
        /// A type of phone for a person. Includes a standard type (e.g. 'mobile', 'home') and an optional, custom type to further identify the type of phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type5 Type { get; set; } = new Type5();

        /// <summary>
        /// Specifies if the phone is preferred over others of the same type. Only one phone should be set to primary for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference4? Preference { get; set; } = default!;

        /// <summary>
        /// The country calling code of telephone and/or mobile device when dialing internationally.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCallingCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CountryCallingCode { get; set; } = default!;

        /// <summary>
        /// The number assigned to the phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; } = default!;

        /// <summary>
        /// The extension used to connect to the phone when multiple phones share the same primary number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Extension { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Emails
    {
        /// <summary>
        /// A type of email for a person. Includes a standard type (e.g. 'personal', 'business') and an optional, custom type to further identify the type of email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type6 Type { get; set; } = new Type6();

        /// <summary>
        /// Specifies if the email is preferred over others of the same type or overall. Only one email should be set to primary for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference5? Preference { get; set; } = default!;

        /// <summary>
        /// An email address for the person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialMedia
    {
        /// <summary>
        /// A type of social media account for a person. Includes a standard type (e.g. 'skype', 'facebook') and an optional, custom type to further identify the type of social media account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type7 Type { get; set; } = new Type7();

        /// <summary>
        /// Specifies if the social media account is preferred over others of the same type. Only one social media should be set to primary for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Preference6? Preference { get; set; } = default!;

        /// <summary>
        /// The username, handle or other address of the social media account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrivacyStatusPrivacyCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"unrestricted")]
        Unrestricted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"restricted")]
        Restricted = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type
    {
        /// <summary>
        /// The global category of person name types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TypeCategory Category { get; set; } = default!;

        /// <summary>
        /// The type of a person's name being defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail5? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference
    {

        [System.Runtime.Serialization.EnumMember(Value = @"preferred")]
        Preferred = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EthnicGroup
    {
        /// <summary>
        /// The global identifier for the Ethnic Group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reporting
    {
        /// <summary>
        /// The country with specific reporting requirements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country2? Country { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Race
    {
        /// <summary>
        /// The global identifier for the Race.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Reporting2
    {
        /// <summary>
        /// The country with specific reporting requirements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Country3? Country { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"secondary")]
        Secondary = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MaritalStatusMaritalCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"single")]
        Single = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"married")]
        Married = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"divorced")]
        Divorced = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"widowed")]
        Widowed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"separated")]
        Separated = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail2
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VeteranStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nonVeteran")]
        NonVeteran = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"activeDuty")]
        ActiveDuty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"protectedVeteran")]
        ProtectedVeteran = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"nonProtectedVeteran")]
        NonProtectedVeteran = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail3
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CitizenshipStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"citizen")]
        Citizen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nonCitizen")]
        NonCitizen = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail4
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RolesRole
    {

        [System.Runtime.Serialization.EnumMember(Value = @"student")]
        Student = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"instructor")]
        Instructor = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"employee")]
        Employee = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"vendor")]
        Vendor = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"alumni")]
        Alumni = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"prospectiveStudent")]
        ProspectiveStudent = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"advisor")]
        Advisor = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country
    {
        /// <summary>
        /// The ISO 3166-1 alpha-3 country code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CountryCode Code { get; set; } = default!;

        /// <summary>
        /// A region within the country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Region? Region { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type2
    {
        /// <summary>
        /// A global category for identity document types
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type2Category Category { get; set; } = default!;

        /// <summary>
        /// The detailed information on the identity document type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail6? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CredentialsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ssn")]
        Ssn = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sin")]
        Sin = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"bannerId")]
        BannerId = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"colleaguePersonId")]
        ColleaguePersonId = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"elevateId")]
        ElevateId = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"bannerSourcedId")]
        BannerSourcedId = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"bannerUserName")]
        BannerUserName = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"bannerUdcId")]
        BannerUdcId = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"colleagueUserName")]
        ColleagueUserName = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"taxIdentificationNumber")]
        TaxIdentificationNumber = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type3
    {
        /// <summary>
        /// The global identifier for the Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// The details associated with an existing address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// The global identifier for the Address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type4
    {
        /// <summary>
        /// A mapping to a standard type for the address type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type4AddressType AddressType { get; set; } = default!;

        /// <summary>
        /// Additional details about the type of address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail7? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SeasonalOccupancies
    {
        [Newtonsoft.Json.JsonProperty("recurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Recurrence? Recurrence { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type5
    {
        /// <summary>
        /// A type of phone contact for a person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type5PhoneType PhoneType { get; set; } = default!;

        /// <summary>
        /// Additional details about the type of phone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail8? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type6
    {
        /// <summary>
        /// A mapping to a standard type for the email type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type6EmailType EmailType { get; set; } = default!;

        /// <summary>
        /// Additional details about the type of email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail9? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type7
    {
        /// <summary>
        /// A type of social media account (e.g. 'skype', 'facebook').
        /// </summary>
        [Newtonsoft.Json.JsonProperty("socialMediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type7SocialMediaType SocialMediaType { get; set; } = default!;

        /// <summary>
        /// Additional details about the type of social media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail10? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Preference6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TypeCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"personal")]
        Personal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"birth")]
        Birth = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"legal")]
        Legal = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"favored")]
        Favored = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail5
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// Reporting requirements for the United States of America
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country2
    {
        /// <summary>
        /// The country code for the United States of America.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country2Code Code { get; set; } = default!;

        /// <summary>
        /// The category of ethnic origin to which a person belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ethnicCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country2EthnicCategory EthnicCategory { get; set; } = default!;

    }

    /// <summary>
    /// Reporting requirements for the United States of America
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Country3
    {
        /// <summary>
        /// The country code for the United States of America.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country3Code Code { get; set; } = default!;

        /// <summary>
        /// The IPEDS racial category to which the race belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("racialCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Country3RacialCategory RacialCategory { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CountryCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AUS")]
        AUS = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Region
    {
        /// <summary>
        /// The ISO 3166-2 code of a region within the country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Code? Code { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type2Category
    {

        [System.Runtime.Serialization.EnumMember(Value = @"passport")]
        Passport = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"photoId")]
        PhotoId = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail6
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type4AddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"home")]
        Home = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"school")]
        School = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"vacation")]
        Vacation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"shipping")]
        Shipping = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"mailing")]
        Mailing = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"parent")]
        Parent = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"family")]
        Family = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"pobox")]
        Pobox = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"main")]
        Main = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"branch")]
        Branch = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"region")]
        Region = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"support")]
        Support = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"matchingGifts")]
        MatchingGifts = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail7
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recurrence
    {
        /// <summary>
        /// The period of time to be repeated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timePeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimePeriod TimePeriod { get; set; } = new TimePeriod();

        /// <summary>
        /// The rule that describes how to repeat the time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repeatRule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatRule RepeatRule { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type5PhoneType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"mobile")]
        Mobile = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"home")]
        Home = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"school")]
        School = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"vacation")]
        Vacation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"fax")]
        Fax = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"pager")]
        Pager = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"tdd")]
        Tdd = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"parent")]
        Parent = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"family")]
        Family = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"main")]
        Main = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"branch")]
        Branch = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"region")]
        Region = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"support")]
        Support = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"matchingGifts")]
        MatchingGifts = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail8
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type6EmailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"personal")]
        Personal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"school")]
        School = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"parent")]
        Parent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"family")]
        Family = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"sales")]
        Sales = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"support")]
        Support = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"general")]
        General = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"legal")]
        Legal = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"hr")]
        Hr = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"media")]
        Media = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"matchingGifts")]
        MatchingGifts = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail9
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type7SocialMediaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"windowsLive")]
        WindowsLive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"yahoo")]
        Yahoo = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"skype")]
        Skype = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"qq")]
        Qq = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hangouts")]
        Hangouts = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"icq")]
        Icq = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"jabber")]
        Jabber = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"facebook")]
        Facebook = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"twitter")]
        Twitter = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"instagram")]
        Instagram = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"tumblr")]
        Tumblr = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"pinterest")]
        Pinterest = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"linkedin")]
        Linkedin = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"foursquare")]
        Foursquare = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"youtube")]
        Youtube = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"blog")]
        Blog = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"website")]
        Website = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail10
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country2Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USA")]
        USA = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country2EthnicCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"hispanic")]
        Hispanic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nonHispanic")]
        NonHispanic = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country3Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USA")]
        USA = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Country3RacialCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"americanIndianOrAlaskaNative")]
        AmericanIndianOrAlaskaNative = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"asian")]
        Asian = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"blackOrAfricanAmerican")]
        BlackOrAfricanAmerican = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"hawaiianOrPacificIslander")]
        HawaiianOrPacificIslander = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Code
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AU-NSW")]
        AUNSW = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AU-ACT")]
        AUACT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AU-VIC")]
        AUVIC = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AU-QLD")]
        AUQLD = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AU-SA")]
        AUSA = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AU-WA")]
        AUWA = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AU-TAS")]
        AUTAS = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AU-NT")]
        AUNT = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimePeriod
    {
        /// <summary>
        /// The beginning of the time period being repeated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartOn { get; set; } = default!;

        /// <summary>
        /// The end of the time period being repeated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOn { get; set; } = default!;

    }

    /// <summary>
    /// Rules for repeating on a daily basis.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepeatRule
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepeatRuleType Type { get; set; } = default!;

        /// <summary>
        /// Number of days between each repetition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Interval { get; set; } = default!;

        /// <summary>
        /// When to end the daily repetitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ends? Ends { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepeatRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"daily")]
        Daily = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ends
    {
        /// <summary>
        /// Number of times to repeat, then stop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repetitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Repetitions { get; set; } = default!;

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603