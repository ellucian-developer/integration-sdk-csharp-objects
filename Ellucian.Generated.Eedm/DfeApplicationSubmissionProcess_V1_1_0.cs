//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Ellucian.Generated.Eedm;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ellucian.Generated.Eedm.DfeApplicationSubmissionProcess_V1_1_0
{
    using System = global::System;

    

    /// <summary>
    /// The submission of teachers training applications in UK under UK Government Department, DfE (Department for Education).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DfeApplicationSubmissionProcess_V1_1_0
    {
        /// <summary>
        /// The unique DfE ID of this application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dfeApplicationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DfeApplicationId { get; set; } = default!;

        /// <summary>
        /// Type of the object, always 'application'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Type { get; set; } = default!;

        /// <summary>
        /// The attributes of the application and applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Attribute Attribute { get; set; } = new Attribute();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attribute
    {
        /// <summary>
        /// The status of this application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Status { get; set; } = default!;

        /// <summary>
        /// The phase of this application. In the first phase, 'Apply 1', the candidate can choose up to 3 courses. If all of those choices are rejected, declined, or withdrawn, the user can go into 'Apply 2'. This means they can choose 1 course at a time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Phase { get; set; } = default!;

        /// <summary>
        /// Time of submission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SubmittedOn { get; set; } = default!;

        /// <summary>
        /// Time of last change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedOn { get; set; } = default!;

        /// <summary>
        /// Time when the application is due to be rejected by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rejectByDefaultOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RejectByDefaultOn { get; set; } = default!;

        /// <summary>
        /// Indicates when the candidate met their conditions, receiving a firm place on the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recruitedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RecruitedOn { get; set; } = default!;

        /// <summary>
        /// The candidate’s personal statement, combined from the 'Becoming a Teacher' and 'Subject Knowledge' fields in the application form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("personalStatement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PersonalStatement { get; set; } = default!;

        /// <summary>
        /// The candidate’s interview preferences.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interviewPreference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InterviewPreference { get; set; } = default!;

        /// <summary>
        /// Other personal or professional issues relevant to the application which are not covered in the form.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("furtherInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FurtherInformation { get; set; } = default!;

        /// <summary>
        /// Personal Details of an applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("candidate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Candidate Candidate { get; set; } = new Candidate();

        /// <summary>
        /// Phone, email and physical addresses where an applicant may be contacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contactDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactDetails ContactDetails { get; set; } = new ContactDetails();

        /// <summary>
        /// Identifies the subject requested by an applicant and all related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("course", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Course? Course { get; set; } = default!;

        /// <summary>
        /// Information about applicant’s qualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Qualification? Qualification { get; set; } = default!;

        /// <summary>
        /// Information about an applicant’s current and previous employments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workExperience", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkExperience? WorkExperience { get; set; } = default!;

        /// <summary>
        /// Information about an applicant’s referee and the reference associated with the referee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("references", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<References>? References { get; set; } = default!;

        /// <summary>
        /// Decisions made on application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Offer? Offer { get; set; } = default!;

        /// <summary>
        /// Date and reason for withdrawal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("withdrawal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Withdrawal? Withdrawal { get; set; } = default!;

        /// <summary>
        /// Reason for rejection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rejection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rejection? Rejection { get; set; } = default!;

        /// <summary>
        /// Information required by HESA for the Initial Teacher Training data return. This information will only be returned once the application status is `enrolled`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaIttData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HesaIttData? HesaIttData { get; set; } = default!;

        /// <summary>
        /// The candidate's reference number for their application in the Apply system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportReference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SupportReference { get; set; } = default!;

        /// <summary>
        /// Status of candidate's response to the safeguarding issues declaration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("safeguardingIssuesStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SafeguardingIssuesStatus { get; set; } = default!;

        /// <summary>
        /// URL to Apply system where safeguarding issues disclosed by the candidate can be access by users with permissions to view safeguarding information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("safeguardingIssuesDetailsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SafeguardingIssuesDetailsUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Candidate
    {
        /// <summary>
        /// The candidate’s ID in the Apply system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; } = default!;

        /// <summary>
        /// The candidate’s first name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; } = default!;

        /// <summary>
        /// The candidate’s last name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; } = default!;

        /// <summary>
        /// The candidate’s date of birth.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateOfBirth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DateOfBirth { get; set; } = default!;

        /// <summary>
        /// One or more ISO 3166 country codes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Nationality { get; set; } = default!;

        /// <summary>
        /// The candidate’s domicile, extracted from their address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domicile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Domicile { get; set; } = default!;

        /// <summary>
        /// The candidate’s UK residency status, e.g. Citizen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ukResidencyStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UkResidencyStatus { get; set; } = default!;

        /// <summary>
        /// The candidate’s UK residency status code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ukResidencyStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? UkResidencyStatusCode { get; set; } = default!;

        /// <summary>
        /// Provisional fee payer status based on a candidate's nationality, residency status and domicile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feePayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FeePayer { get; set; } = default!;

        /// <summary>
        /// Does this candidate have English as a main language?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("englishMainLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnglishMainLanguage { get; set; } = default!;

        /// <summary>
        /// About this candidate's English language qualifications, if English is not their main language.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("englishLanguageQualification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EnglishLanguageQualification { get; set; } = default!;

        /// <summary>
        /// Details of the candidate's fluency in other languages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OtherLanguage { get; set; } = default!;

        /// <summary>
        /// Voluntary disclosure of disabliity or SEN so providers can provide appropriate support.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabilityDisclosure", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DisabilityDisclosure { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactDetails
    {
        /// <summary>
        /// The candidate’s address line 1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressLine1 { get; set; } = default!;

        /// <summary>
        /// The candidate’s address line 2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine2 { get; set; } = default!;

        /// <summary>
        /// The candidate’s address line 3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine3 { get; set; } = default!;

        /// <summary>
        /// The candidate’s address line 4.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressLine4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AddressLine4 { get; set; } = default!;

        /// <summary>
        /// The candidate’s country - ISO 3166 country code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; } = default!;

        /// <summary>
        /// The candidate’s email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; } = default!;

        /// <summary>
        /// The candidate’s phone number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhoneNumber { get; set; } = default!;

        /// <summary>
        /// The candidate’s postcode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Postcode { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Course
    {
        /// <summary>
        /// The course’s recruitment cycle year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recruitmentCycleYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RecruitmentCycleYear { get; set; } = default!;

        /// <summary>
        /// The provider’s code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("providerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProviderCode { get; set; } = default!;

        /// <summary>
        /// The course’s code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("courseCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourseCode { get; set; } = default!;

        /// <summary>
        /// The site’s code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("siteCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SiteCode { get; set; } = default!;

        /// <summary>
        /// Can be 'full_time' or 'part_time'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("studyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StudyMode { get; set; } = default!;

        /// <summary>
        /// Indicates when this course starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Qualification
    {
        /// <summary>
        /// Information related to General Certificate of Secondary Education (GCSE) exams.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gcses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gcses>? Gcses { get; set; } = default!;

        /// <summary>
        /// Information about an applicant’s degree.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("degrees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Degrees>? Degrees { get; set; } = default!;

        /// <summary>
        /// Additional qualification details of an applicant.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherQualifications", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OtherQualifications>? OtherQualifications { get; set; } = default!;

        /// <summary>
        /// If the candidate lacks any required GCSEs, this field will contain their free-text explanation of why this is the case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("missingGcsesExplanation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MissingGcsesExplanation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkExperience
    {
        /// <summary>
        /// Information about an applicant’s jobs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Jobs>? Jobs { get; set; } = default!;

        /// <summary>
        /// Information about an applicant’s volunteering experience.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volunteering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Volunteering>? Volunteering { get; set; } = default!;

        /// <summary>
        /// The candidate’s explanation for any breaks in work history. Will be null if there aren't any breaks in the candidate’s work history. We define a break in work history as more than a month between 2 jobs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workHistoryBreakExplanation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WorkHistoryBreakExplanation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class References
    {
        /// <summary>
        /// A unique reference ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        /// <summary>
        /// The referee’s name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// The referee’s email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        /// <summary>
        /// The candidate’s description of their relationship with the referee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Relationship { get; set; } = default!;

        /// <summary>
        /// The reference content provided by the referee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Reference { get; set; } = default!;

        /// <summary>
        /// Indicates whether the referee flagged safeguarding concerns about this candidate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("safeguardingConcerns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SafeguardingConcerns { get; set; } = default!;

        /// <summary>
        /// The referee’s relationship to the candidate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("refereeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RefereeType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offer
    {
        /// <summary>
        /// Conditions to be met for admissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Conditions { get; set; } = default!;

        /// <summary>
        /// Identifies the subject requested by an applicant and all related information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("course", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Course2 Course { get; set; } = new Course2();

        /// <summary>
        /// Date and time the offer was made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerMadeOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OfferMadeOn { get; set; } = default!;

        /// <summary>
        /// Date and time the offer was accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerAcceptedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OfferAcceptedOn { get; set; } = default!;

        /// <summary>
        /// Date and time the offer was declined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offerDeclinedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? OfferDeclinedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Withdrawal
    {
        /// <summary>
        /// Date of the withdrawal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rejection
    {
        /// <summary>
        /// The reason for rejection or offer withdrawal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; } = default!;

        /// <summary>
        /// Date of rejection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HesaIttData
    {
        /// <summary>
        /// The candidate’s sex as a [1-digit HESA code for Sex].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Sex { get; set; } = default!;

        /// <summary>
        /// The candidate’s disability as [a 2-digit HESA code for Disability].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string>? Disability { get; set; } = default!;

        /// <summary>
        /// The candidate’s ethnicity as [a 2-digit HESA code for Ethnicity].
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ethnicity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Ethnicity { get; set; } = default!;

        /// <summary>
        /// The candidate’s description of their disability, if they selected “Other” and entered a value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherDisabilityDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OtherDisabilityDetails { get; set; } = default!;

        /// <summary>
        /// The candidate’s description of their ethnicity, if they selected “Other” and entered a value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherEthnicityDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OtherEthnicityDetails { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Gcses
    {
        /// <summary>
        /// The qualification ID in the Apply system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// The qualification awarded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QualificationType { get; set; } = default!;

        /// <summary>
        /// For a qualification of type non_uk, this field will contain a free-text description of the qualification type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonUkQualificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NonUkQualificationType { get; set; } = default!;

        /// <summary>
        /// The subject studied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Subject { get; set; } = default!;

        /// <summary>
        /// The HECoS code for the subject studied, if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubjectCode { get; set; } = default!;

        /// <summary>
        /// The grade awarded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Grade { get; set; } = default!;

        /// <summary>
        /// The year the award was made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwardYear { get; set; } = default!;

        /// <summary>
        /// Details about the institution and awarding body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institutionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InstitutionDetails { get; set; } = default!;

        /// <summary>
        /// Details of equivalency, if this qualification was awarded overseas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("equivalencyDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EquivalencyDetails { get; set; } = default!;

        /// <summary>
        /// Details about the qualification awarding body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardingBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwardingBody { get; set; } = default!;

        /// <summary>
        /// The year the candidate started qualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartYear { get; set; } = default!;

        /// <summary>
        /// HESA code for degree type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeType { get; set; } = default!;

        /// <summary>
        /// HESA code for degree subject.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeSubject { get; set; } = default!;

        /// <summary>
        /// HESA code for degree class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeClass { get; set; } = default!;

        /// <summary>
        /// HESA code for degree establishment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeEstablishment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeEstablishment { get; set; } = default!;

        /// <summary>
        /// HESA code for degree country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeCountry { get; set; } = default!;

        /// <summary>
        /// Degree start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HesaDegreeStartDate { get; set; } = default!;

        /// <summary>
        /// Degree End date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HesaDegreeEndDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Degrees
    {
        /// <summary>
        /// The qualification ID in the Apply system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// The qualification awarded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QualificationType { get; set; } = default!;

        /// <summary>
        /// For a qualification of type non_uk, this field will contain a free-text description of the qualification type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonUkQualificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NonUkQualificationType { get; set; } = default!;

        /// <summary>
        /// The subject studied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Subject { get; set; } = default!;

        /// <summary>
        /// The HECoS code for the subject studied, if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubjectCode { get; set; } = default!;

        /// <summary>
        /// The grade awarded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Grade { get; set; } = default!;

        /// <summary>
        /// The year the award was made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwardYear { get; set; } = default!;

        /// <summary>
        /// Details about the institution and awarding body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institutionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InstitutionDetails { get; set; } = default!;

        /// <summary>
        /// Details of equivalency, if this qualification was awarded overseas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("equivalencyDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EquivalencyDetails { get; set; } = default!;

        /// <summary>
        /// Details about the qualification awarding body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardingBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwardingBody { get; set; } = default!;

        /// <summary>
        /// The year the candidate started qualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartYear { get; set; } = default!;

        /// <summary>
        /// HESA code for degree type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeType { get; set; } = default!;

        /// <summary>
        /// HESA code for degree subject.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeSubject { get; set; } = default!;

        /// <summary>
        /// HESA code for degree class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeClass { get; set; } = default!;

        /// <summary>
        /// HESA code for degree establishment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeEstablishment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeEstablishment { get; set; } = default!;

        /// <summary>
        /// HESA code for degree country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeCountry { get; set; } = default!;

        /// <summary>
        /// Degree start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HesaDegreeStartDate { get; set; } = default!;

        /// <summary>
        /// Degree End date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HesaDegreeEndDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherQualifications
    {
        /// <summary>
        /// The qualification ID in the Apply system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// The qualification awarded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? QualificationType { get; set; } = default!;

        /// <summary>
        /// For a qualification of type non_uk, this field will contain a free-text description of the qualification type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonUkQualificationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NonUkQualificationType { get; set; } = default!;

        /// <summary>
        /// The subject studied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Subject { get; set; } = default!;

        /// <summary>
        /// The HECoS code for the subject studied, if available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subjectCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SubjectCode { get; set; } = default!;

        /// <summary>
        /// The grade awarded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Grade { get; set; } = default!;

        /// <summary>
        /// The year the award was made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwardYear { get; set; } = default!;

        /// <summary>
        /// Details about the institution and awarding body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institutionDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InstitutionDetails { get; set; } = default!;

        /// <summary>
        /// Details of equivalency, if this qualification was awarded overseas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("equivalencyDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EquivalencyDetails { get; set; } = default!;

        /// <summary>
        /// Details about the qualification awarding body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("awardingBody", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AwardingBody { get; set; } = default!;

        /// <summary>
        /// The year the candidate started qualification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartYear { get; set; } = default!;

        /// <summary>
        /// HESA code for degree type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeType { get; set; } = default!;

        /// <summary>
        /// HESA code for degree subject.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeSubject { get; set; } = default!;

        /// <summary>
        /// HESA code for degree class.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeClass", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeClass { get; set; } = default!;

        /// <summary>
        /// HESA code for degree establishment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeEstablishment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeEstablishment { get; set; } = default!;

        /// <summary>
        /// HESA code for degree country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeCountry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HesaDegreeCountry { get; set; } = default!;

        /// <summary>
        /// Degree start date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HesaDegreeStartDate { get; set; } = default!;

        /// <summary>
        /// Degree End date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hesaDegreeEndDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? HesaDegreeEndDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Jobs
    {
        /// <summary>
        /// The work experience ID in the Apply system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// The organisation worked for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organisationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganisationName { get; set; } = default!;

        /// <summary>
        /// The date the position began.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        /// <summary>
        /// The date the position finished, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        /// <summary>
        /// The position held by the candidate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Role { get; set; } = default!;

        /// <summary>
        /// A written description of the work involved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Did this position involve working in a school or with children?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workingWithChildren", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkingWithChildren { get; set; } = default!;

        /// <summary>
        /// Whether the work was full time or part time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Commitment { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Volunteering
    {
        /// <summary>
        /// The work experience ID in the Apply system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// The organisation worked for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organisationName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? OrganisationName { get; set; } = default!;

        /// <summary>
        /// The date the position began.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; } = default!;

        /// <summary>
        /// The date the position finished, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; } = default!;

        /// <summary>
        /// The position held by the candidate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Role { get; set; } = default!;

        /// <summary>
        /// A written description of the work involved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Did this position involve working in a school or with children?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workingWithChildren", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? WorkingWithChildren { get; set; } = default!;

        /// <summary>
        /// Whether the work was full time or part time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commitment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Commitment { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Course2
    {
        /// <summary>
        /// The course’s recruitment cycle year
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recruitmentCycleYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RecruitmentCycleYear { get; set; } = default!;

        /// <summary>
        /// The provider’s code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("providerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ProviderCode { get; set; } = default!;

        /// <summary>
        /// The course’s code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("courseCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourseCode { get; set; } = default!;

        /// <summary>
        /// The site’s code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("siteCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SiteCode { get; set; } = default!;

        /// <summary>
        /// Can be 'full_time' or 'part_time'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("studyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StudyMode { get; set; } = default!;

        /// <summary>
        /// Indicates when this course starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? StartDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603