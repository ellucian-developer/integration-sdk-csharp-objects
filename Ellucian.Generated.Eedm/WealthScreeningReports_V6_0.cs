//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Ellucian.Generated.Eedm;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ellucian.Generated.Eedm.WealthScreeningReports_V6_0
{
    using System = global::System;

    

    /// <summary>
    /// Results of person's wealth screening for fundraising purposes (integration model)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WealthScreeningReports_V6_0
    {
        /// <summary>
        /// Metadata about the JSON payload
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata? Metadata { get; set; } = default!;

        /// <summary>
        /// The internal identifier of the wealth screening record at the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RecordId { get; set; } = default!;

        /// <summary>
        /// The global identifier of the request for the wealth screening record
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid RequestId { get; set; } = default!;

        /// <summary>
        /// Wealth screening metrics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metrics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metrics? Metrics { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metrics
    {
        /// <summary>
        /// The first component of the propensity to give score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propensityToGiveScore1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PropensityToGiveScore1 { get; set; } = default!;

        /// <summary>
        /// The second component of the propensity to give score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propensityToGiveScore2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PropensityToGiveScore2 { get; set; } = default!;

        /// <summary>
        /// The rating associated with the propensity to give score
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propensityToGiveRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PropensityToGiveRating { get; set; } = default!;

        /// <summary>
        /// The total value of all assets held by a household
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AssetRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the total assets range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AssetRating { get; set; } = default!;

        /// <summary>
        /// The difference between total assets and total debt for a household
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netWorthRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NetWorthRange { get; set; } = default!;

        /// <summary>
        /// Corresponding rating for the net worth range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netWorthRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? NetWorthRating { get; set; } = default!;

        /// <summary>
        /// The measure of financial assets readily available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liquidityRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LiquidityRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the liquidity range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liquidityRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? LiquidityRating { get; set; } = default!;

        /// <summary>
        /// The measure of money the person gives annually to all nonprofits
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAnnualDonationsRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EstimatedAnnualDonationsRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for estimated annual donations range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedAnnualDonationsRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? EstimatedAnnualDonationsRating { get; set; } = default!;

        /// <summary>
        /// The measure of philanthropic intent based on client supplied giving information
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inclinationGiving", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InclinationGiving { get; set; } = default!;

        /// <summary>
        /// The measure of philanthropic intent based on affiliations and political giving
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inclinationAffiliation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InclinationAffiliation { get; set; } = default!;

        /// <summary>
        /// The amount the prospect can afford to give to all nonprofits over a 5-year period
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the giving capacity range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityRating { get; set; } = default!;

        /// <summary>
        /// The rating indicating is the person is a good candidate for bequest giving
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bequestRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BequestRating { get; set; } = default!;

        /// <summary>
        /// The rating indicating is the person is a good candidate for annuity giving
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annuityRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? AnnuityRating { get; set; } = default!;

        /// <summary>
        /// The rating indicating is the person is a good candidate for trust giving
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trustRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TrustRating { get; set; } = default!;

        /// <summary>
        /// Prospect's influence in their community based upon current board membership
        /// </summary>
        [Newtonsoft.Json.JsonProperty("influenceRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? InfluenceRating { get; set; } = default!;

        /// <summary>
        /// The total income range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IncomeRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the income range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? IncomeRating { get; set; } = default!;

        /// <summary>
        /// The total real estate value range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realEstateValueRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RealEstateValueRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the real estate value range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realEstateValueRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RealEstateValueRating { get; set; } = default!;

        /// <summary>
        /// The total real estate property count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realEstateCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RealEstateCount { get; set; } = default!;

        /// <summary>
        /// The total direct stock holdings range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("directStockRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DirectStockRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the direct stock range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("directStockRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DirectStockRating { get; set; } = default!;

        /// <summary>
        /// The total stock value range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStockRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TotalStockRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for total stock value range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalStockRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TotalStockRating { get; set; } = default!;

        /// <summary>
        /// The total donations range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDonationsRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TotalDonationsRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the total donations range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalDonationsRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? TotalDonationsRating { get; set; } = default!;

        /// <summary>
        /// The range of the total charitable donations amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charitableDonationsRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CharitableDonationsRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the charitable donations range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charitableDonationsRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CharitableDonationsRating { get; set; } = default!;

        /// <summary>
        /// The total political donations amount range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("politicalDonationsRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PoliticalDonationsRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the political donations range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("politicalDonationsRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PoliticalDonationsRating { get; set; } = default!;

        /// <summary>
        /// Ownership of specific assets
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assetOwnership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<AssetOwnership>? AssetOwnership { get; set; } = default!;

        /// <summary>
        /// Board membership
        /// </summary>
        [Newtonsoft.Json.JsonProperty("boardMembership", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BoardMembership? BoardMembership { get; set; } = default!;

        /// <summary>
        /// The D&amp;B company value range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyValueRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyValueRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the D&amp;B company range value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyValueRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CompanyValueRating { get; set; } = default!;

        /// <summary>
        /// The business sales volume range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesVolumeRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SalesVolumeRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the business sales volume range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("salesVolumeRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SalesVolumeRating { get; set; } = default!;

        /// <summary>
        /// The held pensions range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionsRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PensionsRange { get; set; } = default!;

        /// <summary>
        /// The orresponding rating for the pensions range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pensionsRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PensionsRating { get; set; } = default!;

        /// <summary>
        /// The portion of income used in calculating the giving capacity range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityIncomeRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityIncomeRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for giving capacity income range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityIncomeRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityIncomeRating { get; set; } = default!;

        /// <summary>
        /// The portion of real estate used in calculating the giving capacity range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityRealEstateRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityRealEstateRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the giving capacity real estate range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityRealEstateRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityRealEstateRating { get; set; } = default!;

        /// <summary>
        /// The portion of stock value used in calculating the giving capacity range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityStocksRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityStocksRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the giving capacity stocks range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityStocksRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityStocksRating { get; set; } = default!;

        /// <summary>
        /// The portion of the pensions used in calculating the giving capacity range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityPensionsRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityPensionsRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for giving capacity pensions range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityPensionsRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityPensionsRating { get; set; } = default!;

        /// <summary>
        /// The portion of donations used in calculating the giving capacity range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityGivingRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityGivingRange { get; set; } = default!;

        /// <summary>
        /// The corresponding rating for the giving capacity giving range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityGivingRating", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GivingCapacityGivingRating { get; set; } = default!;

        /// <summary>
        /// The age used as the input for the giving capacity rating
        /// </summary>
        [Newtonsoft.Json.JsonProperty("givingCapacityAge", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GivingCapacityAge { get; set; } = default!;

        /// <summary>
        /// Quality of match metrics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualityOfMatch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QualityOfMatch? QualityOfMatch { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AssetOwnership
    {

        [System.Runtime.Serialization.EnumMember(Value = @"aircraft")]
        Aircraft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"boat")]
        Boat = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BoardMembership
    {

        [System.Runtime.Serialization.EnumMember(Value = @"member")]
        Member = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QualityOfMatch
    {
        /// <summary>
        /// The quality of match for the Aircraft source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aircraft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Aircraft { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Airmen source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("airmen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Airmen { get; set; } = default!;

        /// <summary>
        /// The quality of match for the D&amp;B State Business Registrations source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessRegistrations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BusinessRegistrations { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Dunn &amp; Bradstreet source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dunnAndBradstreet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DunnAndBradstreet { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Volunteers &amp; Directors source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volunteersAndDirectors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? VolunteersAndDirectors { get; set; } = default!;

        /// <summary>
        /// The quality of match for the National Do-Not-Mail Registry source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("doNotMail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DoNotMail { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Charitable Donations source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("charitableDonations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CharitableDonations { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Federal Elections Campaigns source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("federalElections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FederalElections { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Guidestar Foundations source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guidestarFoundations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GuidestarFoundations { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Guidestar Directors source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guidestarDirectors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? GuidestarDirectors { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Household Profile source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? HouseholdProfile { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Hoover's source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hoovers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Hoovers { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Major Donor source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("majorDonor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MajorDonor { get; set; } = default!;

        /// <summary>
        /// The quality of match for the National Physicians Profiles source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("physiciansProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PhysiciansProfiles { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Market Guide source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketGuide", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MarketGuide { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Section 527 Political Directors source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("politicalDirectors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PoliticalDirectors { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Pension data source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Pension { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Philanthropic Donations source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("philanthropy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Philanthropy { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Section 527 Political Organizations source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("politicalOrganizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PoliticalOrganizations { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Real Estate source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realEstate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? RealEstate { get; set; } = default!;

        /// <summary>
        /// The quality of match for the State Political Donations source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("politicalDonations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? PoliticalDonations { get; set; } = default!;

        /// <summary>
        /// The quality of match for the SSA Death Index source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("death", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Death { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Wealth ID Securities source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Securities { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Foundation Trustees source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foundationTrustees", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? FoundationTrustees { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Merchant Vessels source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("merchantVessels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? MerchantVessels { get; set; } = default!;

        /// <summary>
        /// The quality of match for the Marquis Who's Who source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("whosWho", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? WhosWho { get; set; } = default!;

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603