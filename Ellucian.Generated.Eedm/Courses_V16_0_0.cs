//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Ellucian.Generated.Eedm;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ellucian.Generated.Eedm.Courses_V16_0_0
{
    using System = global::System;

    

    /// <summary>
    /// The smallest unit of instruction for which an organization grants credits. Identifies subject, course number and level, availability dates, instructional method, grading schemes, credits granted, and the granting organization.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Courses_V16_0_0
    {
        /// <summary>
        /// Metadata about the JSON payload
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metadata? Metadata { get; set; } = default!;

        /// <summary>
        /// A global identifier of a course to be used in all external references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        /// <summary>
        /// The course titles details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("titles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Titles> Titles { get; set; } = new System.Collections.ObjectModel.Collection<Titles>();

        /// <summary>
        /// A description of the substance and nature of a course as it appears in a course catalog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// The branch of knowledge such as 'Mathematics' or 'Biology' associated with a course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subject Subject { get; set; } = new Subject();

        /// <summary>
        /// The topic associated with the course.(for example - Real Estate, Modern Literature, Travel and Leisure, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("topic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Topic? Topic { get; set; } = default!;

        /// <summary>
        /// The categories to which the course may belong (for example - Vocational, Co-op Work Experience, Lab, Music, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Categories>? Categories { get; set; } = default!;

        /// <summary>
        /// The levels of scholarship that apply to a course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("courseLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CourseLevels>? CourseLevels { get; set; } = default!;

        /// <summary>
        /// The methods, styles, or formats in which the course is taught (for example, 'Lecture', 'Lab').
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructionalMethodDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InstructionalMethodDetails>? InstructionalMethodDetails { get; set; } = default!;

        /// <summary>
        /// The hours that may be assigned to the course by instructional method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Hours>? Hours { get; set; } = default!;

        /// <summary>
        /// A list of units of the educational institution (optionally, hierarchical) that own or are responsible for a course
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owningInstitutionUnits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OwningInstitutionUnits>? OwningInstitutionUnits { get; set; } = default!;

        /// <summary>
        /// The starting date on which a course is available to have sections scheduled. When combined with the Course Effective Ending Date, this defines the time period a course is available for scheduling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schedulingStartOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SchedulingStartOn { get; set; } = default!;

        /// <summary>
        /// The ending date on which a course is no longer available to have sections scheduled. When combined with the Course Effective Starting Date, this defines the time period a course is available for scheduling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schedulingEndOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SchedulingEndOn { get; set; } = default!;

        /// <summary>
        /// A numbering scheme that distinguishes courses within a subject. Typically, this is an integer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; } = default!;

        /// <summary>
        /// The academic levels (for example, 'Under Graduate' or 'Graduate') associated with a course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("academicLevels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AcademicLevels>? AcademicLevels { get; set; } = default!;

        /// <summary>
        /// The grading schemes that may be used to award a grade to a student taking this course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradeSchemes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GradeSchemes>? GradeSchemes { get; set; } = default!;

        /// <summary>
        /// The credit specifications that apply to a course (for example, 'Regular Credit').
        /// </summary>
        [Newtonsoft.Json.JsonProperty("credits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Credits>? Credits { get; set; } = default!;

        /// <summary>
        /// The number of units that may be used to calculate the charge for the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("billing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Billing? Billing { get; set; } = default!;

        /// <summary>
        /// An indication if a student is allowed to be on the waitlist for multiple sections of the same course simultaneously.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("waitlistMultipleSections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WaitlistMultipleSections? WaitlistMultipleSections { get; set; } = default!;

        /// <summary>
        /// Additional properties required for localized reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportingDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReportingDetail? ReportingDetail { get; set; } = default!;

        /// <summary>
        /// The administrative period associated with a course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("administrativePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdministrativePeriod? AdministrativePeriod { get; set; } = default!;

        /// <summary>
        /// The status associated with the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status Status { get; set; } = new Status();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Titles
    {
        /// <summary>
        /// The type of course title (e.g. short title, long title).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Type Type { get; set; } = new Type();

        /// <summary>
        /// The title for the course associated with the type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subject
    {
        /// <summary>
        /// The global identifier for the Subject.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Topic
    {
        /// <summary>
        /// The global identifier for the Topic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// The categories to which the course may belong (for example - Vocational, Co-op Work Experience, Lab, Music, etc.)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Categories
    {
        /// <summary>
        /// The global identifier for the Categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    /// <summary>
    /// The levels of scholarship that apply to a course.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CourseLevels
    {
        /// <summary>
        /// The global identifier for the Course Levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstructionalMethodDetails
    {
        /// <summary>
        /// The method, style, or format in which the course is taught (for example, 'Lecture', 'Lab').
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructionalMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstructionalMethod InstructionalMethod { get; set; } = new InstructionalMethod();

        /// <summary>
        /// The delivery method used for instruction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instructionalDeliveryMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstructionalDeliveryMethod? InstructionalDeliveryMethod { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Hours
    {
        /// <summary>
        /// The method, style, or format for which hours are established for a course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("administrativeInstructionalMethod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdministrativeInstructionalMethod AdministrativeInstructionalMethod { get; set; } = new AdministrativeInstructionalMethod();

        /// <summary>
        /// The minimum number of hours that may be established for an instructional method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Minimum { get; set; } = default!;

        /// <summary>
        /// The maximum number of hours that may be established for an instructional method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Maximum { get; set; } = default!;

        /// <summary>
        /// The increment specified for the hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("increment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Increment { get; set; } = default!;

        /// <summary>
        /// The interval specified for the hours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interval? Interval { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwningInstitutionUnits
    {
        /// <summary>
        /// A School, College, Division, Department, or any other organizational unit in the institution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("institutionUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InstitutionUnit InstitutionUnit { get; set; } = new InstitutionUnit();

        /// <summary>
        /// The portion of a course that is owned or allocated to a particular organization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ownershipPercentage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OwnershipPercentage { get; set; } = default!;

    }

    /// <summary>
    /// The academic levels (for example, 'Under Graduate' or 'Graduate') associated with a course.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcademicLevels
    {
        /// <summary>
        /// The global identifier for the Academic Levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GradeSchemes
    {
        /// <summary>
        /// The grading scheme that may be used to award a grade to a student taking this course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gradeScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GradeScheme GradeScheme { get; set; } = new GradeScheme();

        /// <summary>
        /// An indicator of whether the grade scheme is used as the default for registration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Usage? Usage { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Credits
    {
        /// <summary>
        /// The academic credit category associated with the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreditCategory CreditCategory { get; set; } = new CreditCategory();

        /// <summary>
        /// A unit or standard of measurement for a course credit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("measure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditsMeasure Measure { get; set; } = default!;

        /// <summary>
        /// The lower, inclusive bound of the range of values for a course credit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Minimum { get; set; } = default!;

        /// <summary>
        /// The upper, inclusive bound of the range of values for a course credit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Maximum { get; set; } = default!;

        /// <summary>
        /// The increment by which the range of values for a course credit can change from the minimum to the maximum. For example, a range of 1 to 3 with an increment of 1 would evaluate to 1, 2, or 3. Specifying an increment of 0.5 would evaluate to 1, 1.5, 2, 2.5, or 3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("increment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Increment { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Billing
    {
        /// <summary>
        /// The minimum number of units that may be used to calculate the charge for the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Minimum { get; set; } = default!;

        /// <summary>
        /// The maximum number of units that may be used to calculate the charge for the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Maximum { get; set; } = default!;

        /// <summary>
        /// The increment by which the range of values for billing units can change from the minimum to the maximum.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("increment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Increment { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WaitlistMultipleSections
    {

        [System.Runtime.Serialization.EnumMember(Value = @"allowed")]
        Allowed = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"notAllowed")]
        NotAllowed = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReportingDetail
    {
        /// <summary>
        /// The locality requiring additional reporting properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportingDetailType Type { get; set; } = default!;

        /// <summary>
        /// The weight assigned to the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("courseWeight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CourseWeight { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdministrativePeriod
    {
        /// <summary>
        /// The global identifier for the Administrative Period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Status
    {
        /// <summary>
        /// The global identifier for the Status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Type
    {
        /// <summary>
        /// The global identifier for the Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstructionalMethod
    {
        /// <summary>
        /// The global identifier for the Instructional Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstructionalDeliveryMethod
    {
        /// <summary>
        /// The global identifier for the Instructional Delivery Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdministrativeInstructionalMethod
    {
        /// <summary>
        /// The global identifier for the Administrative Instructional Method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Interval
    {

        [System.Runtime.Serialization.EnumMember(Value = @"day")]
        Day = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"week")]
        Week = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"month")]
        Month = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"term")]
        Term = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstitutionUnit
    {
        /// <summary>
        /// The global identifier for the Institution Unit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GradeScheme
    {
        /// <summary>
        /// The global identifier for the Grade Scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Usage
    {

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditCategory
    {
        /// <summary>
        /// The higher level category of academic credits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreditCategoryCreditType CreditType { get; set; } = default!;

        /// <summary>
        /// The academic credit category associated with the course.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreditsMeasure
    {

        [System.Runtime.Serialization.EnumMember(Value = @"credit")]
        Credit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ceu")]
        Ceu = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hour")]
        Hour = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReportingDetailType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"nebraska")]
        Nebraska = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreditCategoryCreditType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ce")]
        Ce = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"institution")]
        Institution = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"transfer")]
        Transfer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"exchange")]
        Exchange = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"exam")]
        Exam = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"workLifeExperience")]
        WorkLifeExperience = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"noCredit")]
        NoCredit = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603