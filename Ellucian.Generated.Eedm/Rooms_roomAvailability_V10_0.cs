//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using Ellucian.Generated.Eedm;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Ellucian.Generated.Eedm.Rooms_roomAvailability_V10_0
{
    using System = global::System;

    

    /// <summary>
    /// A list of rooms that are available with given parameters.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Rooms_roomAvailability_V10_0
    {
        [Newtonsoft.Json.JsonProperty("recurrence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Recurrence? Recurrence { get; set; } = default!;

        /// <summary>
        /// The institution's site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("site", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Site? Site { get; set; } = default!;

        /// <summary>
        /// The building at the selected site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("building", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Building? Building { get; set; } = default!;

        /// <summary>
        /// For rooms with multiple layout, this can be used. For example, a gymnasium can be used for a seminar or a conference, with different maximum occupancies. For rooms with single occupancy type, "Default" can be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("occupancies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Occupancies>? Occupancies { get; set; } = default!;

        /// <summary>
        /// The type or style of a of room's layout. For example, "Classroom" or "Lecture Hall" style. A room may support multiple types of layouts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roomTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoomTypes>? RoomTypes { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Recurrence
    {
        /// <summary>
        /// The period of time to be repeated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timePeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimePeriod TimePeriod { get; set; } = new TimePeriod();

        /// <summary>
        /// The rule that describes how to repeat the time period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repeatRule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepeatRule RepeatRule { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Site
    {
        /// <summary>
        /// The global identifier of the institution's site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Building
    {
        /// <summary>
        /// The global identifier of a building.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Occupancies
    {
        /// <summary>
        /// For rooms with multiple layout, this can be used. For example, a gymnasium can be used for a seminar or a conference, with different maximum occupancies. For rooms with single occupancy type, "Default" can be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OccupanciesType Type { get; set; } = default!;

        /// <summary>
        /// The maximum number of persons who may occupy a room arranged in a given layout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxOccupancy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double MaxOccupancy { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoomTypes
    {
        /// <summary>
        /// The type or style of a of room's layout. For example, "Classroom" or "Lecture Hall" style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoomTypesType Type { get; set; } = default!;

        /// <summary>
        /// The type or style of a of room's layout. For example, "Classroom"  or "Lecture Hall" style.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Detail? Detail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TimePeriod
    {
        /// <summary>
        /// The beginning of the time period being repeated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartOn { get; set; } = default!;

        /// <summary>
        /// The end of the time period being repeated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOn { get; set; } = default!;

    }

    /// <summary>
    /// Rules for repeating on a daily basis.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RepeatRule
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepeatRuleType Type { get; set; } = default!;

        /// <summary>
        /// Number of days between each repetition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Interval { get; set; } = default!;

        /// <summary>
        /// When to end the daily repetitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ends", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Ends? Ends { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OccupanciesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"banquet")]
        Banquet = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"conference")]
        Conference = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"sportsevent")]
        Sportsevent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"graduationceremony")]
        Graduationceremony = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"seminar")]
        Seminar = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"boardmeeting")]
        Boardmeeting = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"performance")]
        Performance = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"convention")]
        Convention = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"convocation")]
        Convocation = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"pressmeet")]
        Pressmeet = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"workshops")]
        Workshops = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"exam")]
        Exam = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"classroom")]
        Classroom = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"laboratory")]
        Laboratory = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RoomTypesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"residencehallroom")]
        Residencehallroom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"residentialsingleroom")]
        Residentialsingleroom = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"residentialdoubleroom")]
        Residentialdoubleroom = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"residentialtripleroom")]
        Residentialtripleroom = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"residentialsuiteroom")]
        Residentialsuiteroom = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"apartment")]
        Apartment = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"house")]
        House = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"classroom")]
        Classroom = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"lecturehall")]
        Lecturehall = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"seminarroom")]
        Seminarroom = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"conferenceroom")]
        Conferenceroom = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"sciencelaboratory")]
        Sciencelaboratory = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"computerlaboratory")]
        Computerlaboratory = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"mechanicsboratory")]
        Mechanicsboratory = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"audiovisualboratory")]
        Audiovisualboratory = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"artstudio")]
        Artstudio = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"musicroom")]
        Musicroom = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"performingartsstudio")]
        Performingartsstudio = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"ballroom")]
        Ballroom = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"office")]
        Office = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"studyfacility")]
        Studyfacility = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"clinic")]
        Clinic = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"animalquarters")]
        Animalquarters = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"greenhouse")]
        Greenhouse = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"specialusefacility")]
        Specialusefacility = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"generalusefacility")]
        Generalusefacility = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"foodfacility")]
        Foodfacility = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"daycare")]
        Daycare = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"lounge")]
        Lounge = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"merchandisingroom")]
        Merchandisingroom = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"supportfacility")]
        Supportfacility = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"healthcarefacility")]
        Healthcarefacility = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"atrium")]
        Atrium = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"amphitheater")]
        Amphitheater = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"auditorium")]
        Auditorium = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"booth")]
        Booth = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 36,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Detail
    {
        /// <summary>
        /// The global identifier for the Detail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RepeatRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"daily")]
        Daily = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ends
    {
        /// <summary>
        /// Number of times to repeat, then stop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repetitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Repetitions { get; set; } = default!;

    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603